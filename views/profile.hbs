<form class="mt-4">
    <style>
        .changed {
            border: 2px solid yellow;
        }
    </style>
    <div class="form-group">
        <h4>Profile</h4>
    </div>
    <div class="form-group">
        <label for="nickname">Nickname</label>
        <input onkeypress="fieldsChanged(this)" type="text" class="form-control" id="nickname"
               placeholder="cin >> nickname"
               value="{{user.nickname}}"/>
    </div>
    <div class="form-group">
        <label for="desc">Status</label>
        <input onkeypress="fieldsChanged(this)" type="text" class="form-control" id="desc" placeholder="OwO"
               value="{{user.desc}}"/>
    </div>
    <!--    <div class="form-group">-->
    <!--        <label for="password">Password</label>-->
    <!--        <input onkeypress="fieldsChanged(this)" type="password" class="form-control" id="password" placeholder="UwU"/>-->
    <!--    </div>-->
    <div class="btn-group" role="group" aria-label="Basic example">
        <button class="btn btn-primary" type="button" onclick="updateProfile()" id="update_btn" disabled="disabled">
            Update
        </button>
        <button class="btn btn-danger" type="button" onclick="resetProfile()" id="reset_btn" disabled="disabled">
            Reset
        </button>
    </div>
    <div class="form-group">
        <label for="profile_pic">
            <img class="img-thumbnail" onerror="this.onerror=null;this.src='/images/guest.png';" src="{{user.pfp}}"
                 style="cursor: pointer;max-height: 256px;" id="pfp_preview" alt="Profile Picture"/>
        </label><br>
        <button class="btn btn-primary" type="button" onclick="uploadPFP()" id="upload_btn" disabled="disabled">Upload
        </button>
        <br>
        <small>Only JPG/PNG/GIF are allowed, images will be fit-cropped to 256&times;256</small>
        <input id="profile_pic" type="file" onchange="changePFP()" hidden/>
    </div>
    <script src="/js/api.js"></script>
    <script>
        const user_info = {nickname: '{{user.nickname}}', desc: '{{user.desc}}'};

        const upload_btn = document.getElementById('upload_btn');
        const profile_pic = document.getElementById('profile_pic');
        const pfp_preview = document.getElementById('pfp_preview');

        const update_btn = document.getElementById('update_btn');
        const reset_btn = document.getElementById('reset_btn');
        const nickname = document.getElementById('nickname');
        // const password = document.getElementById('password');
        const desc = document.getElementById('desc');

        window.fieldsChanged = function (elem) {
            update_btn.removeAttribute('disabled');
            reset_btn.removeAttribute('disabled');
            elem.classList.add('changed');
            if (elem.id === 'nickname' && elem.value === user_info.nickname) elem.classList.remove('changed');
            else if (elem.id === 'desc' && elem.value === user_info.desc) elem.classList.remove('changed');
        }
        window.updateProfile = function () {
            if (!(nickname.classList.contains('changed') || desc.classList.contains('changed')
                    // || password.classList.contains('changed')
            )) {
                alert("Nothing was changed!");
                return;
            }
            update_btn.setAttribute('disabled', 'disabled');
            reset_btn.setAttribute('disabled', 'disabled');
            console.log(desc.classList.contains('changed'), desc.value);
            fetcher('/profile', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    nickname: nickname.classList.contains('changed') ? nickname.value : undefined,
                    desc: desc.classList.contains('changed') ? desc.value : undefined,
                    // password: password.classList.contains('changed') ? password.value : undefined,
                })
            }).then(result => {
                if (result.status === "success") {
                    user_info.nickname = result.user.nickname;
                    document.getElementById('drawer-user-desc').innerText = user_info.desc = result.user.desc;
                    document.getElementById('drawer-user-display-name').innerText = result.user.nickname || result.user.name;
                    [nickname, desc].forEach(e => e.classList.remove('changed'));
                } else {
                    alert(result.reason);
                    update_btn.removeAttribute('disabled');
                    reset_btn.removeAttribute('disabled');
                }
            });
        }
        window.resetProfile = function () {
            update_btn.setAttribute('disabled', 'disabled');
            reset_btn.setAttribute('disabled', 'disabled');
            nickname.value = user_info.nickname;
            desc.value = user_info.desc;
            [nickname, desc].forEach(e => e.classList.remove('changed'));
        }

        window.changePFP = function () {
            const reader = new FileReader();
            reader.onload = e => pfp_preview.setAttribute('src', e.target.result)
            reader.readAsDataURL(profile_pic.files[0]);
            upload_btn.removeAttribute('disabled');
        }
        window.uploadPFP = function () {
            const formData = new FormData();
            formData.append('new_profile_pic', profile_pic.files[0]);
            upload_btn.setAttribute('disabled', 'disabled');
            const options = {
                method: 'POST',
                body: formData
            };
            fetcher('/profile/uploadPFP', options).then(result => {
                upload_btn.removeAttribute('disabled');
                if (result.status === "success") document.getElementById('drawer-user-profile-pic').setAttribute('src', result.user.pfp);
                else alert(result.reason);
            });
        }
    </script>
</form>