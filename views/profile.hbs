<form class="mt-4">
    <div class="form-group">
        <h4>Profile</h4>
    </div>
    <div class="form-group">
        <label for="nickname">Nickname</label>
        <input type="text" class="form-control" id="nickname" placeholder="cin >> nickname" value="{{user.nickname}}"/>
    </div>
    <div class="form-group">
        <label for="desc">Status</label>
        <input type="text" class="form-control" id="desc" placeholder="OwO" value="{{user.desc}}"/>
    </div>
    <div class="btn-group" role="group">
        <button class="btn btn-primary" type="button" onclick="updateProfile()" id="update_btn">Update</button>
        <button class="btn btn-danger" type="button" onclick="resetProfile()" id="reset_btn">Reset</button>
    </div>
    <hr>
    <div id="password-form">
        <div class="form-group">
            <label for="old-password">Old Password</label>
            <input type="password" class="form-control" id="old-password" placeholder="UwU"/>
            <div class="invalid-feedback" id="old-password-feedback"></div>
            <small><span id="message">First time? Don't have a password yet?</span>
                <a class="btn btn-sm" href="#"
                   onclick='message=document.getElementById("message");this.classList.add("disabled");auth.sendPasswordResetEmail("{{user.email}}").then(() => message.innerText = "An email as been sent to your email!").catch(error => message.innerText = "Failed. " + error.message).finally(() => this.classList.remove("disabled"))'>Forgot
                    Password!</a></small>
        </div>
        <div class="form-group">
            <label for="new-password">New Password</label>
            <input type="password" class="form-control mb-1" id="new-password" placeholder=">_<"/>
            <input type="password" class="form-control" id="new-password-confirm" placeholder="Retype it please"/>
            <div class="invalid-feedback" id="password-feedback"></div>
            <div class="valid-feedback">Success!</div>
        </div>
        <button class="btn btn-primary" type="button" onclick="changePassword(this)">Change password</button>
    </div>
    <hr>
    <div class="form-group">
        <label for="profile_pic">
            <img class="img-thumbnail" onerror="this.onerror=null;this.src='/images/guest.png';" src="{{user.pfp}}"
                 style="cursor: pointer;max-height: 256px;" id="pfp_preview" alt="Profile Picture"/>
        </label><br>
        <small>Only JPG/PNG/GIF are allowed, images will be fit-cropped to 256&times;256</small><br>
        <button class="btn btn-primary" type="button" onclick="uploadPFP()" id="upload_btn" disabled>Upload</button>
        <input id="profile_pic" type="file" onchange="changePFP()" hidden/>
    </div>
    <hr>
    <div class="pb-3">
        <p>Account Linking</p>
        <button type="button" class="btn btn-outline-dark" onclick="link(this)" id="link_microsoft">
            <i class="fab fa-microsoft"></i>
            &nbsp;Link with Microsoft
        </button>
    </div>
    <script src="/js/api.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
    <script>
        firebase.initializeApp({
            apiKey: "AIzaSyARHcPTpQ09ekeN91DtgfrAl8kA3bgrcYM",
            authDomain: "e-notes-nush.firebaseapp.com",
            databaseURL: "https://e-notes-nush.firebaseio.com",
            projectId: "e-notes-nush",
            storageBucket: "e-notes-nush.appspot.com",
            messagingSenderId: "1002111194265",
            appId: "1:1002111194265:web:24a8837e5d910ebcd11408",
            measurementId: "G-5CEEWG9PZR"
        });
        const auth = firebase.auth();
        // plz dont just randomly change your usernames
        // actually if you did, you can have it, idk why i added nickname system

        const user_info = {nickname: '{{user.nickname}}', desc: '{{user.desc}}', email: '{{user.email}}'};
        const upload_btn = GEBI('upload_btn');
        const profile_pic = GEBI('profile_pic');
        const pfp_preview = GEBI('pfp_preview');

        const update_btn = GEBI('update_btn');
        const reset_btn = GEBI('reset_btn');
        const nickname = GEBI('nickname');
        // const password = GEBI('password');
        const desc = GEBI('desc');

        const form = GEBI('password-form');
        const oldPassword = GEBI('old-password');
        const newPassword = GEBI('new-password');
        const newPassword2 = GEBI('new-password-confirm');
        const feedback = GEBI('password-feedback');
        const feedback2 = GEBI('old-password-feedback');

        addChangeListener(nickname, '{{#if user.nickname}}{{user.nickname}}{{/if}}');
        addChangeListener(desc, '{{#if user.desc}}{{user.desc}}{{/if}}');
        window.changePassword = function (elem) {
            [oldPassword.classList, newPassword.classList, newPassword2.classList].forEach(l => l.remove('is-invalid', 'is-valid'));
            if (newPassword.value.length < 8) {
                feedback.innerText = "Min length = 8";
                newPassword.classList.add('is-invalid');
                newPassword2.classList.add('is-invalid');
            } else if (newPassword.value === oldPassword.value) {
                feedback.innerText = "Nothing changed";
                newPassword.classList.add('is-invalid');
                newPassword2.classList.add('is-invalid');
            } else if (newPassword.value !== newPassword2.value) {
                feedback.innerText = "Mismatch!";
                newPassword.classList.add('is-invalid');
                newPassword2.classList.add('is-invalid');
            } else {
                elem.disabled = true;
                auth.signInWithEmailAndPassword(user_info.email, oldPassword.value).then(() => auth.currentUser.updatePassword(newPassword.value)).then(() => {
                    oldPassword.value = newPassword.value = newPassword2.value = "";
                    newPassword.classList.add('is-valid');
                    newPassword2.classList.add('is-valid');
                    alert("You may want to relogin");
                }).catch((error) => {
                    feedback2.innerText = error.message;
                    oldPassword.classList.add('is-invalid');
                }).finally(() => elem.disabled = false);
            }
        }
        window.updateProfile = function () {
            if (!nickname.classList.contains('changed') && !desc.classList.contains('changed')) {
                alert("Nothing was changed!");
                return;
            }
            update_btn.disabled = reset_btn.disabled = true;
            console.log(desc.classList.contains('changed'), desc.value);
            fetcher('/profile', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    nickname: nickname.classList.contains('changed') ? nickname.value : undefined,
                    desc: desc.classList.contains('changed') ? desc.value : undefined
                })
            }).then(result => {
                update_btn.disabled = reset_btn.disabled = false;
                if (result.status === "success") {
                    user_info.nickname = result.user.nickname;
                    GEBI('drawer-user-desc').innerText = user_info.desc = result.user.desc;
                    GEBI('drawer-user-display-name').innerText = result.user.nickname || result.user.name;
                    addChangeListener(nickname, result.user.nickname);
                    addChangeListener(desc, result.user.desc);
                } else alert(result.reason);
            });
        }
        window.resetProfile = function () {
            update_btn.disabled = reset_btn.disabled = false;
            nickname.value = user_info.nickname;
            desc.value = user_info.desc;
            [nickname, desc].forEach(e => e.classList.remove('changed'));
        }

        window.changePFP = function () {
            const reader = new FileReader();
            reader.onload = e => pfp_preview.setAttribute('src', e.target.result)
            reader.readAsDataURL(profile_pic.files[0]);
            upload_btn.disabled = false;
        }
        window.uploadPFP = function () {
            const formData = new FormData();
            formData.append('new_profile_pic', profile_pic.files[0]);
            upload_btn.disabled = true;
            const options = {
                method: 'POST',
                body: formData
            };
            fetcher('/profile/uploadPFP', options).then(result => {
                upload_btn.disabled = false;
                if (result.status === "success") GEBI('drawer-user-profile-pic').setAttribute('src', result.user.pfp);
                else alert(result.reason);
            });
        }
        var linkMicrosoftBtn = GEBI('link_microsoft');
        auth.onAuthStateChanged(user => {
            if (user && user.providerData.some(p => p.providerId === "microsoft.com")) {
                linkMicrosoftBtn.disabled = true;
                linkMicrosoftBtn.className = "btn btn-outline-success";
                linkMicrosoftBtn.querySelector('i').className = "fas fa-check";
            } else window.link = elem => {
                let provider = new firebase.auth.OAuthProvider('microsoft.com');
                provider.setCustomParameters({prompt: 'consent'});
                auth.currentUser.linkWithPopup(provider).then(result => console.log(auth.currentUser, result)).catch(error => console.error(error));
            }
        });
    </script>
    <script src="https://kit.fontawesome.com/c32b3db897.js" crossorigin="anonymous"></script>
</form>