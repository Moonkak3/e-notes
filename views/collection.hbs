<div class="row" style="margin-top: 2em">
    <div class="col-lg-3">
        <div class="card mt-4">
            <p class="card-header">{{coll.name}}</p>
            <div class="card-body">
                <pre>{{coll.cid}}</pre>
                <p class="card-text">{{coll.desc}}</p>
                {{#if coll.open}}
                    <span class="badge badge-success">Public</span>
                {{else}}
                    <span class="badge badge-danger">Private</span>
                {{/if}}
            </div>
            <div class="card-footer">
                <a href="/" class="card-link">Back</a>
            </div>
        </div>
        <div class="card mt-2" id="note_card" style="display: none;">
            <p class="card-header">Note Info</p>
            <div class="card-body">
                <h6 class="card-title" id="note_name"></h6>
                <pre id="note_id"></pre>
                <p class="card-text" id="note_desc"></p>
            </div>
        </div>
        <div class="card mt-2">
            <ul class="list-group list-group-flush" id="list">
            </ul>
        </div>
    </div>
    <div class="col-lg-9">
        <nav class="navbar navbar-expand-lg navbar-light">
            <a class="navbar-brand" href="#">Notes</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    {{#if user.admin}}
                        <li class="nav-item">
                            <a id="editBtn" class="nav-link disabled" href="#" data-action="edit"
                               data-toggle="modal" data-target="#admin_note_popup">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-action="add"
                               data-toggle="modal" data-target="#admin_note_popup">
                                <i class="fas fa-plus"></i> New
                            </a>
                        </li>
                    {{/if}}
                </ul>
            </div>
        </nav>
        <script src="https://kit.fontawesome.com/c32b3db897.js" crossorigin="anonymous"></script>
        <style>
            #display::before {
                padding-top: 150%;
            }
        </style>
        <div id="display">

        </div>
    </div>
</div>
{{#if user.admin}}
    <div class="modal fade" id="admin_note_popup" tabindex="-1" aria-labelledby="note_popup_title"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="note_popup_title"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="note_form_id">Note ID</label>
                            <input type="text" class="form-control" id="note_form_id"
                                   aria-describedby="add_form_id_help"
                                   placeholder="Empty for random ID">
                            <small id="add_form_id_help" class="form-text text-muted">Please don't use spaces</small>
                        </div>
                        <div class="form-group">
                            <label for="note_form_name">Note Name</label>
                            <input type="text" class="form-control" id="note_form_name"
                                   placeholder="Empty for file name without extension">
                        </div>
                        <div class="form-group">
                            <label for="note_form_desc">Note Description</label>
                            <input type="text" class="form-control" id="note_form_desc"
                                   placeholder="Helpful information">
                        </div>
                        <div class="form-group">
                            <label for="note_form_file">Note Source</label>
                            <input type="file" class="form-control-file" id="note_form_file">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-secondary" onclick="clearFields()">Clear</button>
                    <button id="deleteBtn" type="button" class="btn btn-danger" onclick="initDelete()">Delete
                    </button>
                    <button id="actionBtn" type="button" class="btn btn-primary"
                            onclick="actionBtnClicked(this.innerText.toLowerCase())"></button>
                </div>
                <script>
                    const idInput = document.getElementById('note_form_id');
                    const nameInput = document.getElementById('note_form_name');
                    const descInput = document.getElementById('note_form_desc');
                    const fileInput = document.getElementById('note_form_file');

                    const actionBtn = document.getElementById('actionBtn');
                    const deleteBtn = document.getElementById('deleteBtn');

                    const editBtn = document.getElementById('editBtn');

                    // i hate jquery
                    $('#admin_note_popup').on('show.bs.modal', async e => {
                        if ($(e.relatedTarget).data('action') === 'add') {
                            $('#note_popup_title').text('Add note');
                            idInput.disabled = false;
                            actionBtn.innerText = "Add";
                            deleteBtn.style.display = "none";
                            clearFields();
                        } else {
                            $('#note_popup_title').text('Edit note');
                            idInput.value = cnote.nid;
                            idInput.disabled = true;
                            nameInput.value = cnote.name;
                            descInput.value = cnote.desc;
                            fileInput.value = "";
                            actionBtn.innerText = "Edit";
                            deleteBtn.style.display = "inline-block";
                        }
                        idInput.setAttribute('placeholder', 'Empty for random ID');
                        deleteBtn.innerText = "Delete";
                        deleteBtn.onclick = initDelete;
                    });

                    const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');

                    function actionBtnClicked(action) {
                        if (action === 'add' && !fileInput.files[0]) return alert("Please include a file!");
                        actionBtn.disabled = true;
                        if (!idInput.value) console.log('random id', idInput.value = genRanHex(6));
                        if (action === 'add' && !nameInput.value) nameInput.value = fileInput.files[0].name.replace(/\.[^/.]+$/, "");
                        fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}`, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({
                                action: (action === 'add' ? 'add' : 'edit'),
                                nid: idInput.value,
                                name: nameInput.value,
                                desc: descInput.value
                            })
                        }).then(result => {
                            if (result.reason) throw result.reason;
                            if (fileInput.files[0]) {
                                const formData = new FormData();
                                formData.append('note_source', fileInput.files[0]);
                                return fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}/upload`, {
                                    method: 'POST',
                                    body: formData
                                });
                            } else throw "handled";
                        }).then(fileRes => {
                            actionBtn.disabled = false;
                            $('#admin_note_popup').modal('hide');
                            console.log(fileRes);
                            renderNotes();
                        }).catch(e => {
                            actionBtn.disabled = false;
                            $('#admin_note_popup').modal('hide');
                            console.log(e);
                            renderNotes();
                        });
                    }

                    function initDelete() {
                        let nid = idInput.value;
                        $('#note_popup_title').text(`Delete ${nid}? Please re-enter the id!`);
                        idInput.disabled = false;
                        idInput.value = "";
                        idInput.setAttribute('placeholder', nid);

                        deleteBtn.innerText = "Confirm";
                        deleteBtn.onclick = () => {
                            if (idInput.value === nid) {
                                deleteBtn.disabled = true;
                                fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}`, {
                                    method: 'DELETE'
                                }).then(result => {
                                    deleteBtn.disabled = false;
                                    showNote(null);
                                    if (result.reason) {
                                        alert(result.reason); // failed
                                    } else {
                                        $('#admin_note_popup').modal('hide');
                                        renderNotes();
                                    }
                                }).catch(e => {
                                    showNote(null);
                                    deleteBtn.disabled = false;
                                    console.log(e);
                                });
                            } else alert("ID mismatch!");
                        }
                    }

                    function clearFields() {
                        idInput.value = nameInput.value = descInput.value = fileInput.value = "";
                    }
                </script>
            </div>
        </div>
    </div>
{{/if}}
<script>
    let cnote;
    let cnotes;
    const coll = {cid: '{{coll.cid}}', name: '{{coll.name}}', desc: '{{coll.desc}}'};
    const list = document.getElementById('list');
    const display = document.getElementById('display');
    window.shadowRoot = display.attachShadow({mode: 'open'});
    const noteId = document.getElementById('note_id');
    const noteCard = document.getElementById('note_card');
    const noteName = document.getElementById('note_name');
    const noteDesc = document.getElementById('note_desc');

    async function renderNotes() {
        list.innerHTML = (cnotes = await window.notes
                .getAll(coll.cid)).map(note => `<li id="list_${note.nid}" class="list-group-item" onclick="showNote('${note.nid}')">${note.name}</li>`).join("");
        showNote('{{nid}}');
    }

    function showNote(nid) {
        if (!nid) {
            cnote = null;
            {{#if user.admin}}
                editBtn.classList.add('disabled');
            {{/if}}
            noteId.innerText = "";
            noteCard.style.display = "none";
            noteName.innerText = "";
            noteDesc.innerText = "";
            document.querySelectorAll("#list .list-group-item.active").forEach(elem => elem.classList.remove('active'));
            shadowRoot.innerHTML = "";
        } else {
            if (cnote && cnote.nid === nid) return;
            cnote = cnotes.find(n => n.nid === nid);
            if (!cnote) return;
            {{#if user.admin}}
                editBtn.classList.remove('disabled');
            {{/if}}
            noteId.innerText = cnote.nid;
            noteCard.style.display = "block";
            noteName.innerText = cnote.name;
            noteDesc.innerText = cnote.desc;
            document.querySelectorAll("#list .list-group-item.active").forEach(elem => elem.classList.remove('active'));
            document.getElementById(`list_${cnote.nid}`).classList.add('active');
            fetch(cnote.url).then(res => res.text()).then(text => {
                shadowRoot.innerHTML = text + "\n<style>.container{width: auto !important;}</style>"; // small hax
                updateTheme(); // shadow dom is retarded
            });
        }
        window.history.pushState("", "", `/c/${coll.cid}/${nid ? nid : ''}`);
    }

    window.onhashchange = e => { // support anchor clicking
        let elementToFocus = shadowRoot.getElementById(window.location.hash.slice(1));
        elementToFocus = elementToFocus || shadowRoot.querySelector(`[name='${window.location.hash.slice(1)}']`);
        if (elementToFocus) elementToFocus.scrollIntoView();
    }
    window.onload = e => {
        renderNotes();
    }
</script>
