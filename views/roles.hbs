<style>
    .role-card {
        margin: 0.3em 0;
        padding-left: 2px;
        padding-right: 2px;
    }

    .role-card pre {
        display: inline;
    }

    #input-role-form > .custom-control {
        padding-left: 2.7rem;
    }

    .changed {
        box-shadow: -0.25rem 0 0 0 gold;
        background: lightyellow;
    }

    div.disabled {
        pointer-events: none;
        opacity: 0.7;
    }

    #perm-table td, #perm-table th {
        padding: 0.25rem 0.75rem;
    }
</style>
<h1 class="mt-4">Roles</h1>
<hr>
<div id="display" class="row">
</div>
<div class="modal" tabindex="-1" role="dialog" id="role-modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="display-role-rid"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body d-flex flex-wrap">
                <p id="display-role-name"></p>
                <p class="pl-3 pr-3" id="display-role-desc" style="flex-basis: 100%"></p>
                {{#if user.admin}}
                    <link href="/css/tagin.min.css" rel="stylesheet"/>
                    <form role="form" class="w-100" id="input-role-form">
                        <hr>
                        <div class="custom-control custom-switch">
                            <input class="custom-control-input" type="checkbox" id="input-role-default">
                            <label class="custom-control-label" for="input-role-default">Defaults to allow
                                access</label>
                        </div>
                        <hr>
                        <label class="mt-1">Permissions</label>
                        <table id="perm-table" class="table table-borderless">
                            <thead class="thead-light">
                            <tr>
                                <th scope="col">Collection</th>
                                <th scope="col">Permission</th>
                                <th scope="col"></th>
                            </tr>
                            <tr>
                                <th><input class="custom-select custom-select-sm" id="input-perm-cid" type="text"
                                           list="pre-collection-list"></th>
                                <datalist id="pre-collection-list"></datalist>
                                <th><select id="input-perm-perm" class="custom-select custom-select-sm">
                                    <option value="true">Allow</option>
                                    <option value="false">Deny</option>
                                    <option value="undefined">Unset</option>
                                </select></th>
                                <th>
                                    <button type="button" class="btn btn-sm btn-light" id="input-perm-btn">Add</button>
                                </th>
                            </tr>
                            </thead>
                            <tbody id="input-role-permissions">

                            </tbody>
                        </table>
                        <button id="save-btn" type="submit" class="btn btn-primary">Save</button>
                        <button id="cancel-btn" type="button" class="btn btn-link">Cancel</button>
                    </form>
                    <script>
                        let saveBtn = document.getElementById('save-btn');
                        let cancelBtn = document.getElementById('cancel-btn');
                        cancelBtn.onclick = () => showRole(role.rid, false)
                        let iForm = document.getElementById('input-role-form');
                        let iDefault = document.getElementById('input-role-default');
                        let iPerms = document.getElementById('input-role-permissions');
                        let addPermInput = document.getElementById('input-perm-cid');
                        let addPermPerm = document.getElementById('input-perm-perm');
                        let addPermBtn = document.getElementById('input-perm-btn');

                        const listenerCache = {};

                        function addChangeListener(el, oriVal, getter, target) {
                            if (typeof getter !== 'function') {
                                target = getter;
                                getter = null;
                            }
                            if (!getter) getter = el => el.value;
                            if (!target) target = el;
                            if (listenerCache[el.id]) el.removeEventListener('change', listenerCache[el.id]);
                            if (target.classList.contains('changed')) target.classList.remove('changed');
                            el.addEventListener('change', listenerCache[el.id] = () => {
                                if (!target.classList.contains('changed') && oriVal !== getter(el)) target.classList.add('changed');
                                else if (target.classList.contains('changed') && oriVal === getter(el)) target.classList.remove('changed');
                            });
                        }

                        addPermBtn.onclick = e => {
                            let cid = addPermInput.value;
                            if (!cid) return;
                            let oldSelect = document.querySelector(`select[data-id="${cid}"]`);
                            if (oldSelect) oldSelect.value = addPermPerm.value;
                            else iPerms.innerHTML += `<tr><td>${cid}</td><td><select data-id="${cid}" id="input-perm-${cid.replace(/\s+/g, '_')}" class="custom-select custom-select-sm input-perm-row-select changed"><option value="true" ${addPermPerm.value === "true" ? 'selected' : ''}>Allow</option><option value="false" ${addPermPerm.value === "false" ? 'selected' : ''}>Deny</option><option value="undefined" ${addPermPerm.value === "undefined" ? 'selected' : ''}>Unset</option></select></td></tr>`;
                        }

                        function updateAdminInputs(role) {
                            iDefault.checked = role.defaultPerm;
                            iPerms.innerHTML = Object.keys(role.permissions).map(cid => `<tr><td>${cid}</td><td><select data-id="${cid}" id="input-perm-${cid.replace(/\s+/g, '_')}" class="custom-select custom-select-sm input-perm-row-select"><option value="true" ${role.permissions[cid] ? 'selected' : ''}>Allow</option><option value="false" ${role.permissions[cid] ? '' : 'selected'}>Deny</option><option value="undefined">Unset</option></select></td></tr>`).join('');
                            for (let select of document.getElementsByClassName('input-perm-row-select')) addChangeListener(select, select.value, select.parentElement);
                            addChangeListener(iDefault, role.defaultPerm, el => el.checked, iDefault.parentElement);
                        }

                        iForm.onsubmit = e => {
                            e.preventDefault();
                            console.log('form submit');
                            let payload = {};
                            let permissions = {};
                            if (iRolesWrapper.classList.contains('changed')) payload.roles = iRoles.value.split(',');
                            if (iAdmin.parentElement.classList.contains('changed')) payload.admin = iAdmin.checked;
                            for (let row of document.querySelectorAll('.changed .input-perm-row-select')) permissions[row.getAttribute('data-id')] = row.value;
                            if (Object.keys(permissions).length !== 0) payload.permissions = permissions;
                            if (Object.keys(payload).length === 0) return;
                            iAdmin.disabled = true;
                            iRolesWrapper.classList.add('disabled');
                            saveBtn.disabled = cancelBtn.disabled = true;
                            fetcher('/api/roles/' + role.rid + '/admin', {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify(payload)
                            }).then(role => {
                                console.log(role);
                                roles.update(role.rid, role);
                                showRole(role.rid, false);
                            }).finally(() => {
                                iRolesWrapper.classList.remove('disabled');
                                iAdmin.disabled = saveBtn.disabled = cancelBtn.disabled = false;
                            });
                        };
                        collections.getAll(true).then(colls => {
                            console.log(colls);
                            return document.getElementById('pre-collection-list').innerHTML = colls.map(coll => `<option value="${coll.cid}">${coll.cid}</option>`).join('');
                        })
                    </script>
                {{/if}}
            </div>
        </div>
    </div>
</div>
<script>
    window.currentNav = "roles";
    const display = document.getElementById('display')
    const dRID = document.getElementById('display-role-rid');
    const dName = document.getElementById('display-role-name');
    const dDesc = document.getElementById('display-role-desc');

    const $roleModal = $('#role-modal');

    function renderCollections(forceReset = false) {
        roles.getAll(!forceReset).then(roles => {
            console.log(roles);
            display.innerHTML = roles.map(role => `<div class="col-lg-3 col-md-5 col-sm-12 role-card d-flex align-items-center" id="rid-${role.rid}">
<a onclick="showRole('${role.rid}')" class="card-link"><pre>${role.rid}</pre> ${role.name}</a>
</div>`).join('\n');
        });
    }

    async function showRole(rid, doubleRefresh = true) {
        if (rid) {
            window.role = await roles.get(rid);
            dRID.innerText = role.rid;
            dName.innerText = role.name;
            dDesc.innerText = role.desc ? role.desc : "";
            console.log(role);
            {{#if user.admin}}
                updateAdminInputs(role);
            {{/if}}
            $roleModal.modal('show');
            history.pushState("", "", '/r/' + rid);
            if (doubleRefresh) await roles.get(rid, false);
        } else history.pushState("", "", '/r');
    }

    $roleModal.on('hidden.bs.modal', () => showRole(null));

    window.onload = _ => {
        renderCollections();{{#if show}}showRole("{{show}}");{{/if}}
    }
</script>