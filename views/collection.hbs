<style>
    .card-header .fa {
        transition: .3s transform ease-in-out;
    }

    .card-header.collapsed .fa {
        transform: rotate(90deg);
    }

    .btn-group.block-btn-group {
        display: flex;
    }

    .btn-group.block-btn-group .btn {
        flex: 1;
        border-radius: 0;
    }

    #file-body.has-drag {
        -webkit-box-shadow: 0 5px 20px 10px rgba(231, 166, 26, 0.46);
        -moz-box-shadow: 0 5px 20px 10px rgba(231, 166, 26, 0.46);
        box-shadow: 0 5px 20px 10px rgba(231, 166, 26, 0.46);
    }

    .progress-bar {
        width: auto;
        height: 3px;
        margin: 0 -1.25rem -.75rem;
    }

    #coll-content .card-header, #coll-content .card-footer {
        padding: .5em .75em;
    }

    .note-item:hover .note-index, .note-item:hover .note-btns {
        visibility: inherit;
    }

    .note-index {
        visibility: hidden;
        position: absolute;
        top: 0;
        left: 0;
    }

    .note-btns {
        visibility: hidden;
        position: absolute;
        right: 0;
        top: 0;
        height: 100%;
    }

    .note-btns .btn {
        padding: 0 0.5em;
        border: 0;
    }
</style>
<script src="https://kit.fontawesome.com/c32b3db897.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
<script src="/js/progressbar.min.js"></script>
<script src="/js/moment.min.js"></script>
<div class="row mt-4" id="coll-content">
    <div class="col-lg-3">
        <div class="card mt-4">
            <p class="card-header">{{coll.name}}</p>
            <div class="card-body p-2">
                <pre class="mb-2">{{coll.cid}}</pre>
                <p class="card-text mb-2">{{coll.desc}}</p>
                {{#if coll.open}}
                    <span class="badge badge-success">Public</span>
                {{else}}
                    <span class="badge badge-danger">Private</span>
                {{/if}}
            </div>
            <div class="card-footer">
                <a href="/" class="card-link">Back</a>
            </div>
        </div>
        <div class="card mt-2">
            <p class="card-header d-flex align-items-center" data-toggle="collapse" data-target="#notes-body"
               aria-expanded="true" aria-controls="note-info">Note List <i class="fa fa-chevron-down ml-auto"></i></p>
            <div id="notes-body" class="collapse show">
                {{#if user.admin}}
                    <div class="btn-group block-btn-group">
                        <button id="editBtn" type="button" class="btn btn-light" data-action="edit"
                                onclick="if(cnote)$('#admin-note-popup').modal('show')"><i class="fas fa-edit"></i>
                        </button>
                        <button id="editorBtn" type="button" class="btn btn-light" onclick="openEditor()"><i
                                class="fas fa-external-link-alt"></i></button>
                        <button type="button" class="btn btn-light" data-action="add" data-toggle="modal"
                                data-target="#admin-note-popup"><i class="fas fa-plus"></i></button>
                    </div>
                {{/if}}
                <ul class="list-group list-group-flush" id="note-list">
                </ul>
            </div>
        </div>
        <div class="card mt-2" id="note-card" style="display: none;">
            <p class="card-header d-flex align-items-center" data-toggle="collapse" data-target="#note-info"
               aria-expanded="true"
               aria-controls="note-info">Note Info <i class="fa fa-chevron-down ml-auto"></i></p>
            <div id="note-info" class="card-body collapse show">
                <h6 class="card-title" id="note-name"></h6>
                <pre id="note-id"></pre>
                <p class="card-text" id="note-desc"></p>
                <small class="card-text muted" id="note-time"></small>
            </div>
        </div>
        {{#if user.admin}}
            <div class="card mt-2" id="file-card">
                <p class="card-header d-flex align-items-center collapsed" data-toggle="collapse" aria-expanded="false"
                   data-target="#file-body" aria-controls="note-info">Images <i class="fa fa-chevron-down ml-auto"></i>
                </p>
                <div id="file-body" class="collapse">
                    <input id="file-upload" type='file' hidden multiple/>
                    <div class="btn-group block-btn-group">
                        <button type="button" class="btn btn-light" onclick="fileUpload.click()">
                            <i class="fas fa-upload"></i></button>
                        <button type="button" class="btn btn-secondary" disabled>?</button>
                        <button type="button" class="btn btn-secondary" disabled>?</button>
                    </div>
                    <ul class="list-group list-group-flush" id="file-list"></ul>
                </div>
            </div>
        {{/if}}
    </div>
    <div class="col-lg-9">
        <div id="display"></div>
    </div>
</div>
{{#if user.admin}}
    <div id="file-preview-popup" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <img id="file-preview-image" class="img-fluid" alt="preview" src="/images/guest.png">
            <div class="modal-dialog">
                <div class="modal-content" style="background:0;border:0;">
                    <div class="btn-group-vertical">
                        <button type="button" class="btn btn-danger" id="file-preview-delete"><i
                                class="far fa-trash-alt"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <script>
            const fileImage = GEBI('file-preview-image');
            const fileDelete = GEBI('file-preview-delete');
            const fileUpload = GEBI('file-upload');

            const fileList = GEBI('file-list');
            $('#file-preview-popup').on('show.bs.modal', e => {
                let url = $(e.relatedTarget).data('url');
                if (!url) return e.preventDefault();
                fileImage.setAttribute('src', url);
                fileDelete.onclick = elem => {
                    elem.disabled = true;
                    let name = $(e.relatedTarget).data('name');
                    fetcher(`/api/collections/${coll.cid}/img/${name}`, {method: "DELETE"}).then(result => {
                        elem.disabled = false;
                        if (result.status === "success") {
                            let listItem = GEBI(`file-list-${name.replace(/\s+/g, '_')}`);
                            if (listItem) listItem.remove();
                            $('#file-preview-popup').modal('hide');
                        } else alert(result.reason);
                    })
                }
            });
            fileUpload.onchange = () => {
                let files = fileUpload.files;
                handleFiles(files);
                fileUpload.value = "";
            }
            let fileBody = GEBI('file-body');
            ['dragenter', 'dragover', 'dragleave', 'drop', 'dragend'].forEach(eventName => fileBody.addEventListener(eventName, preventDefaults, false))

            function preventDefaults(e) {
                e.preventDefault()
                e.stopPropagation()
            }

            fileBody.addEventListener('dragenter', _ => fileBody.classList.add('has-drag'));
            fileBody.addEventListener('dragleave', _ => fileBody.classList.remove('has-drag'));
            fileBody.addEventListener('dragover', _ => fileBody.classList.add('has-drag'));
            fileBody.addEventListener('dragend', _ => fileBody.classList.remove('has-drag'));
            fileBody.addEventListener('drop', e => {
                e.preventDefault();
                e.stopPropagation();
                fileBody.classList.remove('has-drag');
                handleFiles(e.dataTransfer.files);
                return false;
            }, false)

            async function handleFiles(files) {
                let tasks = Array.from(files).map(f => startFileUpload(f));
                for (let task of tasks) {
                    await task();
                }
            }

            function fadeOut(el) {
                el.style.opacity = 1;
                (function fade() {
                    if ((el.style.opacity -= .01) < 0) el.remove(); else requestAnimationFrame(fade);
                })();
            }

            function startFileUpload(file) {
                fileList.innerHTML = renderFile({name: file.name, url: null}) + fileList.innerHTML;
                let elem = GEBI(`file-list-${file.name.replace(/\s+/g, '_')}`);
                elem.innerHTML += `<div class="progress-bar" id="file-list-progress-${file.name.replace(/\s+/g, '_')}"></div>`;
                let progress = GEBI(`file-list-progress-${file.name.replace(/\s+/g, '_')}`);
                const line = new ProgressBar.Line(progress, {
                    strokeWidth: 2,
                    color: '#0275d8',
                    trailColor: '#fff',
                    easing: 'easeOut'
                });
                const form = new FormData();
                form.append('payload', file);
                form.append('name', file.name);
                const request = new XMLHttpRequest();
                request.open('post', `/api/collections/${coll.cid}/img`);
                request.setRequestHeader('CSRF-Token', token);
                request.timeout = 45000;
                return () => {
                    return new Promise((resolve, reject) => {
                        request.addEventListener('readystatechange', () => {
                            if (request.readyState === 4) {
                                let url = JSON.parse(request.response);
                                if (url.status === "success") {
                                    elem.setAttribute('data-url', url.url);
                                    resolve();
                                } else reject(url);
                            }
                        })
                        request.upload.addEventListener('error', e => reject(e));
                        request.upload.addEventListener('load', () => {
                            line.animate(1, {duration: 1000});
                            fadeOut(progress);
                        });
                        request.upload.addEventListener('progress', e => line.animate(e.loaded / file.size, {duration: 500}));
                        request.send(form);
                    });
                };
            }

            function renderFile(file) {
                return `<li id="file-list-${file.name.replace(/\s+/g, '_')}" data-target="#file-preview-popup" data-toggle="modal" class="list-group-item" data-url="${file.url}" data-name="${file.name}">${file.name}</li>`;
            }

            async function renderFiles() {
                fileList.innerHTML = (cfiles = await fetcher(`/api/collections/${coll.cid}/img`)).map(renderFile).join('');
            }
        </script>
    </div>
    <div class="modal fade" id="admin-note-popup" tabindex="-1" aria-labelledby="note-popup-title"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="note-popup-title"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="note-form-id">Note ID</label>
                            <input type="text" class="form-control" id="note-form-id"
                                   aria-describedby="add-form-id-help"
                                   placeholder="Empty for random ID">
                            <small id="add-form-id-help" class="form-text text-muted">Please don't use spaces or special
                                characters</small>
                        </div>
                        <div class="form-group">
                            <label for="note-form-name">Note Name</label>
                            <input type="text" class="form-control" id="note-form-name"
                                   placeholder="Empty for file name without extension">
                        </div>
                        <div class="form-group">
                            <label for="note-form-desc">Note Description</label>
                            <input type="text" class="form-control" id="note-form-desc"
                                   placeholder="Helpful information">
                        </div>
                        <div class="custom-file">
                            <label for="note-form-file" class="custom-file-label">Note Source</label>
                            <input type="file" class="custom-file-input" id="note-form-file">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-secondary" onclick="clearFields()">Clear</button>
                    <button id="deleteBtn" type="button" class="btn btn-danger" onclick="initDelete()">Delete
                    </button>
                    <button id="actionBtn" type="button" class="btn btn-primary"
                            onclick="actionBtnClicked(this.innerText.toLowerCase())"></button>
                </div>
                <script>
                    bsCustomFileInput.init();
                    const idInput = GEBI('note-form-id');
                    const nameInput = GEBI('note-form-name');
                    const descInput = GEBI('note-form-desc');
                    const fileInput = GEBI('note-form-file');

                    const actionBtn = GEBI('actionBtn');
                    const deleteBtn = GEBI('deleteBtn');

                    const editBtn = GEBI('editBtn');
                    const editorBtn = GEBI('editorBtn');

                    function openEditor() {
                        if (!cnote) return;
                        window.open(`/c/${coll.cid}/${cnote.nid}/edit`, '_blank').focus();
                    }

                    // i hate jquery
                    $('#admin-note-popup').on('show.bs.modal', e => {
                        console.log($(e.relatedTarget).data('action'));
                        if ($(e.relatedTarget).data('action') === 'add') {
                            $('#note-popup-title').text('Add note');
                            idInput.disabled = false;
                            actionBtn.innerText = "Add";
                            deleteBtn.style.display = "none";
                            clearFields();
                        } else {
                            $('#note-popup-title').text('Edit note');
                            idInput.value = cnote.nid;
                            idInput.disabled = true;
                            nameInput.value = cnote.name;
                            descInput.value = cnote.desc;
                            fileInput.value = "";
                            actionBtn.innerText = "Edit";
                            deleteBtn.style.display = "inline-block";
                        }
                        idInput.setAttribute('placeholder', 'Empty for random ID');
                        deleteBtn.innerText = "Delete";
                        deleteBtn.onclick = initDelete;
                    });

                    const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');

                    function actionBtnClicked(action) {
                        if (action === 'add' && !fileInput.files[0]) return alert("Please include a file!");
                        actionBtn.disabled = true;
                        if (!idInput.value) console.log('random id', idInput.value = genRanHex(6));
                        if (action === 'add' && !nameInput.value) nameInput.value = fileInput.files[0].name.replace(/\.[^/.]+$/, "");
                        fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}`, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({
                                action: (action === 'add' ? 'add' : 'edit'),
                                nid: idInput.value,
                                name: nameInput.value,
                                desc: descInput.value
                            })
                        }).then(result => {
                            if (result.reason) throw result.reason;
                            if (fileInput.files[0]) {
                                const formData = new FormData();
                                formData.append('note_source', fileInput.files[0]);
                                return fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}/upload`, {
                                    method: 'POST',
                                    body: formData
                                });
                            } else throw "handled";
                        }).then(fileRes => {
                            actionBtn.disabled = false;
                            $('#admin-note-popup').modal('hide');
                            console.log(fileRes);
                            renderNotes(cnote ? cnote.nid : null);
                        }).catch(e => {
                            actionBtn.disabled = false;
                            $('#admin-note-popup').modal('hide');
                            console.log(e);
                            renderNotes(cnote ? cnote.nid : null);
                        });
                    }

                    function initDelete() {
                        let nid = idInput.value;
                        $('#note-popup-title').text(`Delete ${nid}? Please re-enter the id!`);
                        idInput.disabled = false;
                        idInput.value = "";
                        idInput.setAttribute('placeholder', nid);

                        deleteBtn.innerText = "Confirm";
                        deleteBtn.onclick = () => {
                            if (idInput.value === nid) {
                                deleteBtn.disabled = true;
                                fetcher(`/api/collections/${coll.cid}/notes/${idInput.value}`, {
                                    method: 'DELETE'
                                }).then(result => {
                                    deleteBtn.disabled = false;
                                    showNote(null);
                                    if (result.reason) {
                                        alert(result.reason); // failed
                                    } else {
                                        $('#admin-note-popup').modal('hide');
                                        renderNotes();
                                    }
                                }).catch(e => {
                                    showNote(null);
                                    deleteBtn.disabled = false;
                                    console.log(e);
                                });
                            } else alert("ID mismatch!");
                        }
                    }

                    function clearFields() {
                        idInput.value = nameInput.value = descInput.value = fileInput.value = "";
                    }

                    function moveUp(nid, elem) {
                        let i = cnotes.findIndex(n => n.nid === nid);
                        if (i === 0) return;
                        let payload = {};
                        payload[cnotes[i].nid] = cnotes[i].index - 1;
                        payload[cnotes[i - 1].nid] = cnotes[i - 1].index + 1;
                        elem.disabled = true;
                        fetcher(`/api/collections/${coll.cid}/reorder`, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify(payload)
                        }).then(result => {
                            elem.disabled = false;
                            if (result.status !== "success") return alert(result.message);
                            for (let nid of Object.keys(result.order)) cnotes.find(n => n.nid === nid).index = result.order[nid];
                            renderNotes(cnote?.nid);
                        });
                    }

                    function moveDown(nid, elem) {
                        let i = cnotes.findIndex(n => n.nid === nid);
                        if (i === cnotes.length - 1) return;
                        let payload = {};
                        payload[cnotes[i].nid] = cnotes[i].index + 1;
                        payload[cnotes[i + 1].nid] = cnotes[i + 1].index - 1;
                        elem.disabled = true;
                        fetcher(`/api/collections/${coll.cid}/reorder`, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify(payload)
                        }).then(result => {
                            elem.disabled = false;
                            if (result.status !== "success") return alert(result.message);
                            for (let nid of Object.keys(result.order)) cnotes.find(n => n.nid === nid).index = result.order[nid];
                            renderNotes(cnote?.nid);
                        });
                    }
                </script>
            </div>
        </div>
    </div>
{{/if}}
<script>
    let cnote;
    let cnotes;
    let cfiles;
    const coll = {cid: '{{coll.cid}}', name: '{{coll.name}}', desc: '{{coll.desc}}'};
    const list = GEBI('note-list');
    const display = GEBI('display');
    window.shadowRoot = display.attachShadow({mode: 'open'});
    const noteId = GEBI('note-id');
    const noteCard = GEBI('note-card');
    const noteName = GEBI('note-name');
    const noteDesc = GEBI('note-desc');
    const noteTime = GEBI('note-time');

    async function renderNotes(nid) {
        list.innerHTML = (cnotes = await window.notes
                .getAll(coll.cid)).sort((a, b) => a.index - b.index).map(note => `<li id="list-${note.nid}" class="list-group-item note-item" onclick="showNote('${note.nid}')"><span class="badge badge-light note-index">#${note.index + 1}</span>${note.name}{{#if
                user.admin}}
            <div class="btn-group-vertical note-btns">
            <button type="button" class="btn" tabindex="-1" onclick="moveUp('${note.nid}', this)"><i class="fas fa-caret-up"></i></button>
            <button type="button" class="btn" tabindex="-1" onclick="moveDown('${note.nid}', this)"><i class="fas fa-caret-down"></i></button>
            </div>
                {{/if}}</li>`).join("");
        showNote(nid);
    }

    function showNote(nid) {
        qsa("#note-list .list-group-item.active").forEach(elem => elem.classList.remove('active'));
        if (!nid) {
            document.title = coll.cid + "/" + coll.name;
            cnote = null;
            {{#if user.admin}}
                editBtn.classList.add('disabled');
                editorBtn.classList.add('disabled');
            {{/if}}
            noteId.innerText = noteName.innerText = noteDesc.innerText = noteTime.innerText = "";
            noteCard.style.display = "none";
            shadowRoot.innerHTML = "";
        } else {
            if (cnote && cnote.nid === nid) return;
            cnote = cnotes.find(n => n.nid === nid);
            if (!cnote) return showNote(null);
            document.title = coll.cid + "/" + cnote.name;
            {{#if user.admin}}
                editBtn.classList.remove('disabled');
                editorBtn.classList.remove('disabled');
            {{/if}}
            noteId.innerText = cnote.nid;
            noteCard.style.display = "block";
            noteName.innerText = cnote.name;
            noteDesc.innerText = cnote.desc;
            let now = moment();
            let lastEdit = moment(cnote.lastEdit);
            let dateStr = lastEdit.year() !== now.year() ? lastEdit.format("MMM D YYYY") :
                    lastEdit.month() !== now.month() ? lastEdit.format("MMM D h:mm a") :
                            lastEdit.date() !== now.date() ? lastEdit.format("Do h:mm:ss a") : 'Today ' + lastEdit.format("h:mm:ss a");
            noteTime.innerText = `Last edited • ${dateStr}`;
            GEBI(`list-${cnote.nid}`).classList.add('active');
            fetch(cnote.url).then(res => res.text()).then(text => {
                shadowRoot.innerHTML = `${text}<style>.container{width:auto!important;}#notebook-container{padding:0;-webkit-box-shadow:none;box-shadow:none;}.prompt{min-width:0;}</style>`; // small hax
                updateTheme(); // shadow dom is retarded
            });
        }
        window.history.pushState("", "", `/c/${coll.cid}/${nid ? nid : ''}`);
    }

    window.onhashchange = e => { // support anchor clicking
        let elementToFocus = shadowRoot.getElementById(window.location.hash.slice(1)) || shadowRoot.querySelector(`[name='${window.location.hash.slice(1)}']`);
        if (elementToFocus) elementToFocus.scrollIntoView();
    }

    window.onload = e => {
        renderNotes('{{nid}}');{{#if user.admin}}renderFiles();{{/if}}
    }
</script>
