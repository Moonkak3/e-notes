<style>
    .role-card {
        margin: 0.3em 0;
        padding-left: 2px;
        padding-right: 2px;
    }

    .role-card pre {
        display: inline;
    }

    #input-role-form > .custom-control {
        padding-left: 3.7rem;
        padding-right: 1rem;
        margin-bottom: 0.25rem;
    }

    #input-role-form > .form-group {
        margin-bottom: 0.25rem;
    }

    #input-role-form > .row {
        margin-left: 0;
        margin-right: 0;
    }

    #perm-table td, #perm-table th {
        padding: 0.25rem 0.75rem;
    }
</style>
<h1 class="mt-4">Roles{{#if user.admin}}
    <button type="button" class="btn btn-secondary" onclick="addRole()">+</button>
{{/if}}</h1>
<hr>

<div id="display" class="row">
</div>
<div class="modal" tabindex="-1" role="dialog" id="role-modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="display-role-title">Role</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-0">
                <div id="display-role-info" class="p-3">
                    <h4 id="display-role-name"></h4>
                    <pre id="display-role-rid"></pre>
                    <p id="display-role-desc"></p>
                </div>
                {{#if user.admin}}
                    <link href="/css/tagin.min.css" rel="stylesheet"/>
                    <form role="form" class="w-100 mt-1" id="input-role-form">
                        <div class="form-group row">
                            <label for="input-role-id" class="col-sm-2 col-form-label">ID</label>
                            <div class="col-sm-10">
                                <input type="text" readonly class="form-control" id="input-role-id" required>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="input-role-name" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="input-role-name" required>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="input-role-desc" class="col-sm-2 col-form-label">Desc</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="input-role-desc">
                            </div>
                        </div>
                        <div class="custom-control custom-switch mb-3">
                            <input class="custom-control-input" type="checkbox" id="input-role-default">
                            <label class="custom-control-label" for="input-role-default">Defaults to allow
                                access</label>
                        </div>
                        <table id="perm-table" class="table table-borderless">
                            <thead class="thead-light">
                            <tr>
                                <th scope="col">Collection</th>
                                <th scope="col">Permission</th>
                                <th scope="col"></th>
                            </tr>
                            <tr>
                                <th><input class="custom-select custom-select-sm" id="input-perm-cid" type="text"
                                           list="pre-collection-list"></th>
                                <datalist id="pre-collection-list"></datalist>
                                <th><select id="input-perm-perm" class="custom-select custom-select-sm">
                                    <option value="true">Allow</option>
                                    <option value="false">Deny</option>
                                    <option value="undefined">Unset</option>
                                </select></th>
                                <th>
                                    <button type="button" class="btn btn-sm btn-light" id="input-perm-btn">Add</button>
                                </th>
                            </tr>
                            </thead>
                            <tbody id="input-role-permissions">

                            </tbody>
                        </table>
                        <button id="save-btn" type="submit" class="btn btn-primary ml-3 mb-3">Save</button>
                        <button id="delete-btn" type="button" class="btn btn-outline-danger mb-3">Delete</button>
                        <button id="cancel-btn" type="button" class="btn btn-link mb-3">Cancel</button>
                    </form>
                    <script>
                        let saveBtn = GEBI('save-btn');
                        let deleteBtn = GEBI('delete-btn');
                        let cancelBtn = GEBI('cancel-btn');
                        cancelBtn.onclick = () => {
                            if (document.querySelector('#input-role-form .changed')) showRole(null, role.rid, false);
                            else $roleModal.modal('hide');
                        }
                        let iForm = GEBI('input-role-form');
                        let iDefault = GEBI('input-role-default');
                        let iPerms = GEBI('input-role-permissions');
                        let addPermInput = GEBI('input-perm-cid');
                        let addPermPerm = GEBI('input-perm-perm');
                        let addPermBtn = GEBI('input-perm-btn');
                        let iTitle = GEBI('display-role-title');
                        let iBox = GEBI('display-role-info');
                        let iID = GEBI('input-role-id');
                        let iName = GEBI('input-role-name');
                        let iDesc = GEBI('input-role-desc');
                        let isAddingRole = false;
                        let deleteLvl = 0;
                        deleteBtn.onclick = e => {
                            deleteLvl++;
                            deleteBtn.innerText = "Delete? " + (5 - deleteLvl);
                            if (deleteLvl >= 5) {
                                deleteBtn.disabled = true;
                                fetcher('/api/roles/' + iID.value, {
                                    method: 'DELETE'
                                }).then(role => {
                                    if (role.status === 'ok') {
                                        roles.update(iID.value, null);
                                        $roleModal.modal('hide');
                                        renderRoles();
                                    } else alert('Failed! ' + role.reason);
                                }).finally(() => {
                                    deleteBtn.disabled = false;
                                    deleteBtn.innerText = "Delete";
                                });
                            }
                        }

                        addPermBtn.onclick = e => {
                            let cid = addPermInput.value;
                            if (!cid) return;
                            addPermInput.value = "";
                            let oldSelect = qs(`select[data-id="${cid}"]`);
                            if (oldSelect) oldSelect.value = addPermPerm.value;
                            else iPerms.innerHTML += `<tr><td>${cid}</td><td class="${isAddingRole ? '' : 'changed'}"><select data-id="${cid}" id="input-perm-${cid.replace(/\s+/g, '_')}" class="custom-select custom-select-sm input-perm-row-select"><option value="true" ${addPermPerm.value === "true" ? 'selected' : ''}>Allow</option><option value="false" ${addPermPerm.value === "false" ? 'selected' : ''}>Deny</option><option value="undefined" ${addPermPerm.value === "undefined" ? 'selected' : ''}>Unset</option></select></td></tr>`;
                            addPermPerm.value = "true";
                        }

                        function updateAdminInputs(role) {
                            $(iBox).show();
                            deleteLvl = 0;
                            deleteBtn.innerText = "Delete";
                            $(deleteBtn).show();
                            iTitle.innerText = "Edit Role";
                            iDefault.checked = role.defaultPerm;
                            iPerms.innerHTML = Object.keys(role.permissions).sort().map(cid => `<tr><td>${cid}</td><td><select data-id="${cid}" id="input-perm-${cid.replace(/\s+/g, '_')}" class="custom-select custom-select-sm input-perm-row-select"><option value="true" ${role.permissions[cid] ? 'selected' : ''}>Allow</option><option value="false" ${role.permissions[cid] ? '' : 'selected'}>Deny</option><option value="undefined">Unset</option></select></td></tr>`).join('');
                            iID.setAttribute('readonly', 'true');
                            for (let select of document.getElementsByClassName('input-perm-row-select')) addChangeListener(select, select.value, select.parentElement);
                            addChangeListener(iDefault, role.defaultPerm, el => el.checked, iDefault.parentElement);
                            addChangeListener(iID, iID.value = role.rid, iID.parentElement.parentElement);
                            addChangeListener(iName, iName.value = role.name, iName.parentElement.parentElement);
                            addChangeListener(iDesc, iDesc.value = role.desc, iDesc.parentElement.parentElement);
                            isAddingRole = false;
                        }

                        iForm.onsubmit = e => {
                            e.preventDefault();
                            if (isAddingRole) {
                                iForm.classList.add('disabled');
                                let permissions = {};
                                for (let row of qsa('.input-perm-row-select')) {
                                    permissions[row.getAttribute('data-id')] = row.value;
                                    row.parentElement.parentElement.classList.add('disabled');
                                }
                                fetcher('/api/roles/' + iID.value, {
                                    method: 'POST',
                                    headers: {'Content-Type': 'application/json'},
                                    body: JSON.stringify({
                                        rid: iID.value,
                                        name: iName.value,
                                        desc: iDesc.value,
                                        defaultPerm: iDefault.checked,
                                        permissions: permissions
                                    })
                                }).then(role => {
                                    if (role.reason) return alert(role.reason);
                                    console.log(role);
                                    roles.update(role.rid, role);
                                    showRole(null, role.rid, false);
                                    renderRoles();
                                }).finally(() => {
                                    iForm.classList.remove('disabled');
                                });
                            } else {
                                let payload = {};
                                let permissions = {};
                                if (iDefault.parentElement.classList.contains('changed')) payload.defaultPerm = iDefault.checked;
                                if (iName.parentElement.parentElement.classList.contains('changed')) payload.name = iName.value;
                                if (iDesc.parentElement.parentElement.classList.contains('changed')) payload.desc = iDesc.value;

                                for (let row of qsa('.changed .input-perm-row-select')) {
                                    permissions[row.getAttribute('data-id')] = row.value;
                                    row.parentElement.parentElement.classList.add('disabled');
                                }
                                if (Object.keys(permissions).length !== 0) payload.permissions = permissions;
                                if (Object.keys(payload).length === 0) return;
                                iDefault.disabled = saveBtn.disabled = deleteBtn.disabled = cancelBtn.disabled = true;
                                fetcher('/api/roles/' + role.rid + '/admin', {
                                    method: 'POST',
                                    headers: {'Content-Type': 'application/json'},
                                    body: JSON.stringify(payload)
                                }).then(role => {
                                    console.log(role);
                                    roles.update(role.rid, role);
                                    showRole(null, role.rid, false);
                                    renderRoles();
                                }).finally(() => {
                                    iDefault.disabled = saveBtn.disabled = deleteBtn.disabled = cancelBtn.disabled = false;
                                });
                            }
                        };
                        collections.getAll(true).then(colls => {
                            console.log(colls);
                            return GEBI('pre-collection-list').innerHTML = colls.map(coll => `<option value="${coll.cid}">${coll.cid}</option>`).join('');
                        })

                        function addRole() {
                            window.role = null;
                            iTitle.innerText = "New Role";
                            isAddingRole = true;
                            $(iBox).hide();
                            $(deleteBtn).hide();

                            iID.removeAttribute('readonly');
                            iID.value = "";
                            iName.value = "";
                            iDesc.value = "";
                            iDefault.checked = false;
                            iPerms.innerHTML = "";

                            $roleModal.modal('show');
                            history.pushState("", "", '/r?new=true');
                            clearChangeListener(iDefault);
                            clearChangeListener(iID);
                            clearChangeListener(iName);
                            clearChangeListener(iDesc);
                        }
                    </script>
                {{/if}}
                <hr>
                <h5 class="px-3">Users with this role</h5>
                <div id="display-role-users" class="px-3">

                </div>
                {{#if user.admin}}
                    <script>
                        let emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/g;

                        function addToUsers(btn) {
                            btn.disabled = true;
                            let input = GEBI("input-add-users").value;
                            let m;
                            let emails = [];
                            do {
                                m = emailRegex.exec(input);
                                if (m) emails.push(m[0]);
                            } while (m);
                            if (emails.length === 0) return alert("No users specified");
                            if (confirm(`Give '${window.role.name}' (${window.role.rid}) to ${emails.length} users?`)) {
                                fetchJSON("/api/roles/" + window.role.rid + "/users", {
                                    method: 'POST',
                                    body: JSON.stringify({
                                        emails: emails,
                                        action: "add"
                                    })
                                }).then(res => {
                                    console.log(res);
                                    if (res.status === "ok") {
                                        alert("Updated " + res.updated + " users");
                                        dUsers.innerHTML = renderUsersWhoHasRole(res.users);
                                    }
                                }).finally(() => {
                                    btn.disabled = false;
                                });
                            } else {
                                btn.disabled = false;
                            }
                        }

                        function removeFromUsers(btn) {
                            btn.disabled = true;
                            let input = GEBI("input-remove-users").value;
                            let m;
                            let emails = [];
                            do {
                                m = emailRegex.exec(input);
                                if (m) emails.push(m[0]);
                            } while (m);
                            if (emails.length === 0) return alert("No users specified");
                            if (confirm(`Remove '${window.role.name}' (${window.role.rid}) from ${emails.length} users?`)) {
                                fetchJSON("/api/roles/" + window.role.rid + "/users", {
                                    method: 'POST',
                                    body: JSON.stringify({
                                        emails: emails,
                                        action: "remove"
                                    })
                                }).then(res => {
                                    console.log(res);
                                    if (res.status === "ok") {
                                        alert("Updated " + res.updated + " users");
                                        dUsers.innerHTML = renderUsersWhoHasRole([]);
                                    }
                                }).finally(() => {
                                    btn.disabled = false;
                                });
                            } else {
                                btn.disabled = false;
                            }
                        }
                    </script>
                    <div class="input-group px-3 py-1">
                        <input type="text" class="form-control" placeholder="Emails (,/SPACE/;)"
                               id="input-add-users">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" onclick="addToUsers(this)">
                                Grant
                            </button>
                        </div>
                    </div>

                    <div class="input-group px-3 py-1">
                        <input type="text" class="form-control" placeholder="Emails (,/SPACE/;)"
                               id="input-remove-users">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" onclick="removeFromUsers(this)">
                                Remove
                            </button>
                        </div>
                    </div>
                {{/if}}
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/marked@3.0.8/lib/marked.min.js"></script>
<script>
    window.currentNav = "roles";
    const display = GEBI('display')
    const dRID = GEBI('display-role-rid');
    const dName = GEBI('display-role-name');
    const dDesc = GEBI('display-role-desc');
    const dUsers = GEBI('display-role-users');

    const $roleModal = $('#role-modal');

    function renderRoles(forceReset = false) {
        return roles.getAll(!forceReset).then(roles => {
            console.log(roles);
            display.innerHTML = roles.map(role => `<div class="col-lg-3 col-md-5 col-sm-12 role-card d-flex align-items-center" id="rid-${escapeHTML(role.rid)}">
<a onclick="showRole(this,'${escapeHTML(role.rid)}')" class="btn btn-light card-link"><pre>${escapeHTML(role.rid)}</pre> ${escapeHTML(role.name)}</a>
</div>`).join('\n');
        });
    }

    function renderUsersWhoHasRole(users) {
        if (users.length > 0) return users.map(u => `<span class="mr-1 badge bg-light text-dark">${u.name} <small>${u.email}</small></span>`).join("");
        else return "<em>None</em>";
    }

    async function showRole(elem, rid, doubleRefresh = true) {
        if (rid) {
            if (elem) elem.classList.add("disabled");
            window.role = await roles.get(rid);
            dRID.innerText = role.rid;
            dName.innerText = role.name;
            dDesc.innerHTML = marked((role.desc ? role.desc : "")||"");
            let users = await roles.getUsers(rid);
            dUsers.innerHTML = renderUsersWhoHasRole(users);
            {{#if user.admin}}
                updateAdminInputs(role);
            {{/if}}
            $roleModal.modal('show');
            history.pushState("", "", '/r/' + rid);
            if (doubleRefresh) roles.get(rid, false).then(res => {
                if (res.reason && res.reason === "role_not_found") {
                    roles.update(rid, null);
                    $roleModal.modal('hide');
                    renderRoles();
                }
            })
            if (elem) elem.classList.remove("disabled");
        } else history.pushState("", "", '/r');
    }

    $roleModal.on('hidden.bs.modal', () => showRole(null, null));

    window.onload = _ => {
        renderRoles().then(() => renderRoles(true));
        {{#if show}}
            showRole(null, "{{show}}");
        {{/if}}
        {{#if user.admin}}
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('new') === 'true') addRole();
        {{/if}}
    }

    function escapeHTML(s) {
        var el = document.createElement("span");
        el.innerText = el.textContent = s;
        s = el.innerHTML;
        return s;
    }
</script>
