<form class="mt-4">
    <style>
        .changed {
            border: 2px solid yellow;
        }
    </style>
    <div class="form-group">
        <h4>Profile</h4>
    </div>
    <div class="form-group">
        <label for="nickname">Nickname</label>
        <input onkeypress="fieldsChanged(this)" type="text" class="form-control" id="nickname"
               placeholder="cin >> nickname"
               value="{{user.nickname}}"/>
    </div>
    <div class="form-group">
        <label for="desc">Status</label>
        <input onkeypress="fieldsChanged(this)" type="text" class="form-control" id="desc" placeholder="OwO"
               value="{{user.desc}}"/>
    </div>
    <div class="btn-group" role="group" aria-label="Basic example">
        <button class="btn btn-primary" type="button" onclick="updateProfile()" id="update_btn" disabled="disabled">
            Update
        </button>
        <button class="btn btn-danger" type="button" onclick="resetProfile()" id="reset_btn" disabled="disabled">
            Reset
        </button>
    </div>
    <hr>
    <div id="password-form">
        <div class="form-group">
            <label for="old-password">Old Password</label>
            <input type="password" class="form-control" id="old-password" placeholder="UwU"/>
            <div class="invalid-feedback" id="old-password-feedback"></div>
        </div>
        <div class="form-group">
            <label for="new-password">New Password</label>
            <input type="password" class="form-control mb-1" id="new-password" placeholder=">_<"/>
            <input type="password" class="form-control" id="new-password-confirm" placeholder="Retype it please"/>
            <div class="invalid-feedback" id="password-feedback"></div>
            <div class="valid-feedback">Success!</div>
        </div>
        <button class="btn btn-primary" type="button" onclick="changePassword(this)">
            Change password
        </button>
    </div>
    <hr>
    <div class="form-group">
        <label for="profile_pic">
            <img class="img-thumbnail" onerror="this.onerror=null;this.src='/images/guest.png';" src="{{user.pfp}}"
                 style="cursor: pointer;max-height: 256px;" id="pfp_preview" alt="Profile Picture"/>
        </label><br>
        <button class="btn btn-primary" type="button" onclick="uploadPFP()" id="upload_btn" disabled="disabled">Upload
        </button>
        <br>
        <small>Only JPG/PNG/GIF are allowed, images will be fit-cropped to 256&times;256</small>
        <input id="profile_pic" type="file" onchange="changePFP()" hidden/>
    </div>
    <script src="/js/api.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
    <script>
        firebase.initializeApp({
            apiKey: "AIzaSyARHcPTpQ09ekeN91DtgfrAl8kA3bgrcYM",
            authDomain: "e-notes-nush.firebaseapp.com",
            databaseURL: "https://e-notes-nush.firebaseio.com",
            projectId: "e-notes-nush",
            storageBucket: "e-notes-nush.appspot.com",
            messagingSenderId: "1002111194265",
            appId: "1:1002111194265:web:24a8837e5d910ebcd11408",
            measurementId: "G-5CEEWG9PZR"
        });
        const auth = firebase.auth();
        // plz dont just randomly change your usernames
        // actually if you did, you can have it, idk why i added nickname system

        const user_info = {nickname: '{{user.nickname}}', desc: '{{user.desc}}', email: '{{user.email}}'};

        const upload_btn = document.getElementById('upload_btn');
        const profile_pic = document.getElementById('profile_pic');
        const pfp_preview = document.getElementById('pfp_preview');

        const update_btn = document.getElementById('update_btn');
        const reset_btn = document.getElementById('reset_btn');
        const nickname = document.getElementById('nickname');
        // const password = document.getElementById('password');
        const desc = document.getElementById('desc');

        const form = document.getElementById('password-form');
        const oldPassword = document.getElementById('old-password');
        const newPassword = document.getElementById('new-password');
        const newPassword2 = document.getElementById('new-password-confirm');
        const feedback = document.getElementById('password-feedback');
        const feedback2 = document.getElementById('old-password-feedback');

        window.fieldsChanged = function (elem) {
            update_btn.removeAttribute('disabled');
            reset_btn.removeAttribute('disabled');
            elem.classList.add('changed');
            if (elem.id === 'nickname' && elem.value === user_info.nickname) elem.classList.remove('changed');
            else if (elem.id === 'desc' && elem.value === user_info.desc) elem.classList.remove('changed');
        }
        window.changePassword = function (elem) {
            [oldPassword.classList, newPassword.classList, newPassword2.classList].forEach(l => l.remove('is-invalid', 'is-valid'));
            if (newPassword.value.length < 8) {
                feedback.innerText = "Min length = 8"; // i mean if you want to bypass, use your account at your own risk
                newPassword.classList.add('is-invalid'); // i dont think firebase allows it anyways
                newPassword2.classList.add('is-invalid');
                return;
            }
            if (newPassword.value === oldPassword.value) {
                feedback.innerText = "Nothing changed";
                newPassword.classList.add('is-invalid');
                newPassword2.classList.add('is-invalid');
                return;
            }
            if (newPassword.value !== newPassword2.value) {
                feedback.innerText = "Mismatch!";
                newPassword.classList.add('is-invalid');
                newPassword2.classList.add('is-invalid');
                return;
            }
            elem.disabled = true;
            auth.signInWithEmailAndPassword(user_info.email, oldPassword.value).then(() => auth.currentUser.updatePassword(newPassword.value)).then(() => {
                oldPassword.value = newPassword.value = newPassword2.value = "";
                newPassword.classList.add('is-valid');
                newPassword2.classList.add('is-valid');
                alert("You may want to relogin");
            }).catch((error) => {
                feedback2.innerText = error.message;
                oldPassword.classList.add('is-invalid');
            }).finally(() => elem.disabled = false);
        }
        window.updateProfile = function () {
            if (!nickname.classList.contains('changed') && !desc.classList.contains('changed')) {
                alert("Nothing was changed!");
                return;
            }
            update_btn.setAttribute('disabled', 'disabled');
            reset_btn.setAttribute('disabled', 'disabled');
            console.log(desc.classList.contains('changed'), desc.value);
            fetcher('/profile', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    nickname: nickname.classList.contains('changed') ? nickname.value : undefined,
                    desc: desc.classList.contains('changed') ? desc.value : undefined
                })
            }).then(result => {
                if (result.status === "success") {
                    user_info.nickname = result.user.nickname;
                    document.getElementById('drawer-user-desc').innerText = user_info.desc = result.user.desc;
                    document.getElementById('drawer-user-display-name').innerText = result.user.nickname || result.user.name;
                    [nickname, desc].forEach(e => e.classList.remove('changed'));
                } else {
                    alert(result.reason);
                    update_btn.removeAttribute('disabled');
                    reset_btn.removeAttribute('disabled');
                }
            });
        }
        window.resetProfile = function () {
            update_btn.setAttribute('disabled', 'disabled');
            reset_btn.setAttribute('disabled', 'disabled');
            nickname.value = user_info.nickname;
            desc.value = user_info.desc;
            [nickname, desc].forEach(e => e.classList.remove('changed'));
        }

        window.changePFP = function () {
            const reader = new FileReader();
            reader.onload = e => pfp_preview.setAttribute('src', e.target.result)
            reader.readAsDataURL(profile_pic.files[0]);
            upload_btn.removeAttribute('disabled');
        }
        window.uploadPFP = function () {
            const formData = new FormData();
            formData.append('new_profile_pic', profile_pic.files[0]);
            upload_btn.setAttribute('disabled', 'disabled');
            const options = {
                method: 'POST',
                body: formData
            };
            fetcher('/profile/uploadPFP', options).then(result => {
                upload_btn.removeAttribute('disabled');
                if (result.status === "success") document.getElementById('drawer-user-profile-pic').setAttribute('src', result.user.pfp);
                else alert(result.reason);
            });
        }
    </script>
</form>